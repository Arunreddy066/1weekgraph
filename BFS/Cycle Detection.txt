public boolean hasCycleBFS(int V, List<List<Integer>> adj) {
    boolean[] visited = new boolean[V];

    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            Queue<int[]> q = new LinkedList<>();
            q.offer(new int[]{i, -1});
            visited[i] = true;

            while (!q.isEmpty()) {
                int[] curr = q.poll();
                int node = curr[0], parent = curr[1];

                for (int neighbor : adj.get(node)) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        q.offer(new int[]{neighbor, node});
                    } else if (neighbor != parent) {
                        return true; // cycle
                    }
                }
            }
        }
    }
    return false;
}
